随着互联网逐渐渗透到人们生活的每一个角落，人们的生活也变得越来越便利了。但是网络也是一把双刃剑。在它越来越多的控制人们的生活的同时，它不安全的一面也渐渐暴露出来。网络攻击随处可见，造成了难以估计的损失。对于一般民众而言，恶意网站、钓鱼链接是对他们数据、财产安全最大的威胁，需要小心应对。

本设计针对屏蔽对恶意网站的dns请求来达到防护

网络为线性拓扑，共4个host，分别与4个交换机相连（s1,s2,s3,s4）。这四个交换机互相之间也有连接。为了使hosts可以访问外网，故使用了nat参数使得本机也连接在s1上。h1,h2的网关是h3。将controller上的dnsserver设置为h4的mac地址，将dns请求全部劫持到h4上。h4上运行fakedns..py来处理所有dns请求（没图，画一个）

设计与实现方案：controller按一个运行一个经过修改的交换机算法。对于除dns包以外的数据包按正常的交换机进行学习和转发，对于dns查询数据包则将目的mac地址强制设为dnsserver然后在进行交换算法。这样就可以将dns查询报文劫持到h4上。而h4上运行的fakedns将过滤出所有dns包并检查其查询的网址是否在黑名单中，若在黑名单中则不进行响应，否则将该数据包正常送往网关，然后将回应数据包转回来源host。

使用如下命令创建网络拓扑：
mn --controller=remote --topo=linear,4 --nat 
3_0.jpg

设置dnsserver并用如下命令运行controller：
ryu-manager c1.py
使用pingall检查交换功能是否正常：
3_5.jpg
可见交换功能正常

检查各host的网络设置，设置h1的路由表。
3_1.jpg, 3_2.jpg, 3_3.jpg, 3_4.jpg

在h4上设置屏蔽baidu.*，运行./fakedns.py:
3_6.jpg

在h1上用nslookup查询www.google.com：
3_8.jpg
返回了查询结果
用ovs-ofctl dump-flows查看流表：
3_7.jpg
fakedns日志：
3_9.jpg


在h1上用nslookup查询www.baidu.com:
3_11.jpg
返回超时信息
用ovs-ofctl dump-flows查看流表：
3_10.jpg
fakedns日志：
3_12.jpg

可见此方案可以成功阻止对恶意网址的dns查询，进而保护用户安全